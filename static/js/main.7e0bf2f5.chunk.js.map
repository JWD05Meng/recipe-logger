{"version":3,"sources":["Ingredient.js","utils.js","RecipeCard.js","CardDisplay.js","CreateRecipe.js","App.js","reportWebVitals.js","index.js"],"names":["Ingredient","props","useState","ingredient","setIngredient","updateIngredient","evt","prev","target","name","value","console","log","isEditing","className","onClick","removeIngredient","id","xmlns","width","height","fill","viewBox","d","type","onChange","quantity","unit","counter","i","RecipeCard","creating","selected","setSelected","editing","setEditing","ingredients","map","ing","setIngredients","toggleSelected","stopPropagation","toggleEditing","doneHandler","ingredientDivs","document","querySelectorAll","div","querySelector","table","recipe","Recipe","title","createRecipe","updateRecipe","filter","addIngredient","newIngredient","onDoubleClick","item","recipeSelected","deleteRecipe","fillRule","buttonsDisplay","CardDisplay","recipes","CreateRecipe","setRecipe","setName","useEffect","focus","placeholder","onKeyDown","key","rec","cancelCreate","this","App","loadedRecipes","JSON","parse","window","localStorage","getItem","setRecipes","setItem","stringify","setCreating","updatedRecipe","index","findIndex","splice","newRecipe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e0bf2f5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './RecipeCard.css'\r\n\r\nfunction Ingredient(props) {\r\n  let component;\r\n\r\n  const [ingredient, setIngredient] = useState(props.ingredient);\r\n\r\n  const updateIngredient = (evt) => {\r\n    setIngredient(prev => {\r\n      const updated = { ...ingredient, [evt.target.name]: evt.target.value };\r\n      // props.updateIngredient(prev, updated);\r\n      return updated;\r\n    });\r\n\r\n    console.log(ingredient);\r\n  }\r\n\r\n  if (props.isEditing) {\r\n    component = (\r\n      <div className='ingredient-edit'>\r\n        <div className='delete-icon' onClick={() => props.removeIngredient(ingredient.id)}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" className=\"bi bi-x-circle\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\" />\r\n            <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n          </svg>\r\n        </div>\r\n        <input type='text' name='name' onChange={updateIngredient} value={ingredient.name} />\r\n        <input type='text' name='quantity' onChange={updateIngredient} value={ingredient.quantity} />\r\n        <input type='text' name='unit' onChange={updateIngredient} value={ingredient.unit} />\r\n      </div>\r\n    );\r\n  } else {\r\n    component = (\r\n      <div className='ingredient'>\r\n        <span className='name'>{ingredient.name}</span>\r\n        <span className='quantity'>{ingredient.quantity} {ingredient.unit}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return component;\r\n}\r\n\r\nexport default Ingredient\r\n","\r\n// returns a random int between max exclusive and min inclusive \r\nexport const randInt = (maxEclu, min=0) => Math.floor(Math.random()*(maxEclu-min) + min);\r\n\r\n// returns a random element of an array\r\nexport const randElem = (arr) => arr[randInt(arr.length)];\r\n\r\n// inserts element [x] into array [arr] at index [i], returns the modified array.\r\nconst insert = (arr, x, i) => { arr.splice(i, 0, x); return arr; } \r\n\r\n// returns a new copy of array [arr] with elements in a random order\r\nexport const shuffleArray = arr => arr.reduce((acc, x) => insert(acc, x, randInt(acc.length+1)), []);\r\n\r\n// returns a function that returns an incremented int each time it is called\r\nexport const counter = (() => {\r\n  let i = 0;\r\n  return () => i++;\r\n})();\r\n\r\n","import React, { useState } from 'react'\r\nimport Ingredient from './Ingredient'\r\nimport './RecipeCard.css'\r\nimport { counter } from './utils'\r\nimport { Recipe } from './App'\r\n\r\nfunction RecipeCard(props) {\r\n  const [selected, setSelected] = useState(props.creating || false);\r\n  const [editing, setEditing] = useState(props.creating || false);\r\n  const [ingredients, setIngredients] = useState(props.ingredients.map(ing => { return { ...ing, id: counter() } }));\r\n\r\n  const toggleSelected = evt => {\r\n    evt.stopPropagation();\r\n    !editing && setSelected(prev => !prev);\r\n  };\r\n\r\n  const toggleEditing = evt => setEditing(prev => !prev);\r\n\r\n  const doneHandler = () => {\r\n    const ingredientDivs = document.querySelectorAll('.ingredient-edit');\r\n    const ingredients = [...ingredientDivs].map(div => {\r\n      return {\r\n        name: div.querySelector('input[name=\"name\"]').value,\r\n        quantity: div.querySelector('input[name=\"quantity\"]').value,\r\n        unit: div.querySelector('input[name=\"unit\"]').value,\r\n        id: counter()\r\n      }\r\n    });\r\n    console.table(ingredients);\r\n    toggleEditing();\r\n    setIngredients(ingredients);\r\n\r\n    const recipe = new Recipe(props.title, ingredients, props.id);\r\n\r\n    if (props.creating)\r\n      props.createRecipe(recipe);\r\n    else\r\n      props.updateRecipe(props.id, recipe);\r\n  }\r\n\r\n  const removeIngredient = (id) => {\r\n    setIngredients(prev => prev.filter(ing => ing.id !== id));\r\n  }\r\n\r\n  const addIngredient = () => {\r\n    const newIngredient = {\r\n      id: counter(), name: '', quantity: '', unit: ''\r\n    };\r\n    setIngredients(prev => [...prev, newIngredient]);\r\n  }\r\n\r\n  const buttonsDisplay = () => {\r\n    if (selected) {\r\n      return (\r\n        <div className='buttons-div'>\r\n          {!editing && (\r\n            <button className='button delete-button' onClick={() => props.deleteRecipe(props.id)}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n          {!editing && <button className='button' onClick={toggleEditing}>Edit</button>}\r\n          {!editing && <button className='button' onClick={toggleSelected}>Close</button>}\r\n          {editing && <button className='button' onClick={addIngredient}>Add Ingredient</button>}\r\n          {editing && <button className='button' onClick={doneHandler}>Done</button>}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`recipe-card-backdrop ${selected ? 'selected' : ''}`}>\r\n      <div className={`recipe-card ${selected ? 'selected' : ''}`} onDoubleClick={toggleSelected}>\r\n        <div className='title'>\r\n          {props.title}\r\n        </div>\r\n        {ingredients.map(item => <Ingredient\r\n          ingredient={item}\r\n          key={item.id}\r\n          recipeSelected={selected}\r\n          isEditing={editing}\r\n          removeIngredient={removeIngredient}\r\n        />)}\r\n        {buttonsDisplay()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RecipeCard\r\n","import React from 'react'\r\nimport RecipeCard from './RecipeCard'\r\nimport './CardDisplay.css'\r\n\r\nfunction CardDisplay(props) {\r\n\r\n  return (\r\n    <div className='card-display'>\r\n      {props.recipes.map(recipe => <RecipeCard\r\n        title={recipe.title}\r\n        ingredients={recipe.ingredients}\r\n        key={recipe.id}\r\n        id={recipe.id}\r\n        updateRecipe={props.updateRecipe}\r\n        deleteRecipe={props.deleteRecipe}\r\n      />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardDisplay\r\n","import React, { useState, useEffect } from 'react'\r\nimport RecipeCard from './RecipeCard'\r\nimport { Recipe } from './App'\r\nimport './RecipeCard.css'\r\n\r\nfunction CreateRecipe(props) {\r\n  const [recipe, setRecipe] = useState(null);\r\n  const [name, setName] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!name) {\r\n      document.querySelector('input').focus();\r\n    }\r\n  }, []);\r\n\r\n  const keyHandler = evt => {\r\n    if (evt.key === 'Enter') {\r\n      const rec = new Recipe(name, []);\r\n      console.log(rec);\r\n      setRecipe(rec);\r\n    } \r\n    else if (evt.key === 'Escape') {\r\n      props.cancelCreate();\r\n    }\r\n  }\r\n\r\n  const changeHandler = evt => {\r\n    setName(evt.target.value);\r\n  }\r\n\r\n  let display;\r\n\r\n  if (recipe) {\r\n    display = <RecipeCard\r\n      title={recipe.title}\r\n      ingredients={recipe.ingredients}\r\n      id={recipe.id}\r\n      createRecipe={props.createRecipe}\r\n      creating={true}\r\n    />\r\n  } else {\r\n    display = (\r\n      <div className={'recipe-card-backdrop selected'}>\r\n        <div className='recipe-card selected'>\r\n          <input type='text' name='name' placeholder='Recipe Name' onChange={changeHandler} onKeyDown={keyHandler} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return display;\r\n\r\n}\r\n\r\nexport default CreateRecipe\r\n","import './App.css'\nimport CardDisplay from './CardDisplay'\nimport CreateRecipe from './CreateRecipe'\nimport { randInt, randElem, counter } from './utils'\nimport { useState, useEffect } from 'react'\n\nexport class Recipe {\n  constructor(title, ingredients, id=counter()) {\n    this.title = title;\n    this.ingredients = ingredients;\n    this.id = id;\n  }\n}\n\nclass Ingredient {\n  constructor(name, quantity=1, unit='') {\n    this.name = name;\n    this.quantity = quantity;\n    this.unit = unit;\n  }\n}\n\nconst randomIngredient = () => {\n  const foods = ['Carrots', 'Tomatoes', 'Peppers', 'Bok choy', 'Onions', 'Mushrooms', 'Cabbage', 'Chicken', 'Pork', 'Beef'];\n  return new Ingredient(randElem(foods), randInt(80, 10) * 10, 'g');\n}\n\nconst randomRecipe = () => {\n  const methods = ['Boiled', 'Baked', 'Grilled', 'Steamed'];\n  const ingredient1 = randomIngredient();\n  const ingredient2 = randomIngredient();\n  const additionalIngredients = [];\n\n  let additions = randInt(8, 2);\n  while (additions-- > 0) additionalIngredients.push(randomIngredient());\n\n  const title = `${randElem(methods)} ${ingredient1.name} with ${randElem(methods)} ${ingredient2.name}`;\n  return new Recipe(title, [ingredient1, ingredient2, ...additionalIngredients]);\n}\n\n\nfunction App() {\n  const loadedRecipes = JSON.parse(window.localStorage.getItem('stored recipes'));\n  const [recipes, setRecipes] = useState(loadedRecipes || []);\n\n  useEffect(() => {\n    window.localStorage.setItem('stored recipes', JSON.stringify(recipes));\n  }, [recipes]);\n\n  useEffect(() => {\n    // generate random recipes\n    // for (let i=0; i<5; i++) setRecipes(prev => [...prev, randomRecipe()]);\n\n  }, []);\n\n  const [creating, setCreating] = useState(false);\n\n  useEffect(() => setCreating(false), [recipes]);\n\n  const createRecipe = (newRecipe) => {\n    console.log(`adding recipe:`);\n    console.table(newRecipe);\n    setRecipes(prev => [...prev, newRecipe]);\n  }\n\n  const deleteRecipe = (id) => {\n    console.table(recipes);\n    console.log(`attempting to delete recipe: ${id}`);\n    setRecipes(prev => recipes.filter(recipe => recipe.id !== id));\n  }\n\n  const updateRecipe = (id, updatedRecipe) => {\n    console.log(`attempting to update recipe: ${id}`);\n    setRecipes(prev => {\n      const index = prev.findIndex(recipe => recipe.id === id);\n      prev.splice(index, 1, updatedRecipe);\n      return prev;\n    });\n  }\n\n  const cancelCreate = () => {\n    setCreating(false);\n  }\n  \n  return (\n    <div className=\"App\" onDoubleClick={() => setCreating(true)}>\n      <CardDisplay recipes={recipes} updateRecipe={updateRecipe} deleteRecipe={deleteRecipe} />\n      {creating && <CreateRecipe createRecipe={createRecipe} cancelCreate={cancelCreate} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root-mask')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}